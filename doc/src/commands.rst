Команды
*******

Каждая команда представляет собой действие, которое выполняется в определенный момент времени симуляции. Все команды наследуются от базового интерфейса ``interfaces::Command`` и реализуют метод ``execute(PetscInt t)``, который вызывается на каждом временном шаге симуляции. Команды создаются через соответствующие билдеры, которые парсят конфигурационные файлы и создают экземпляры команд с заданными параметрами. В данном разделе описаны все доступные команды для настройки симуляции и показано как описать настройки для команды в конфигурационном файле.


InjectParticles
=============== 

На примере команды для квазинейтральной инжекции частиц будут показаны основные параметры для конструкторов частиц (``ParticlesBuilder``), а также доступные геометрии областей в координатном пространстве (``interfaces::Builder``), которые в данном случае используются для загрузки частиц.

**Описание:**

Команда для инжекции частиц в симуляцию. Создает ионизированные и выброшенные частицы с заданными координатами и импульсами в указанном временном диапазоне.

**Конфигурация в JSON:**

.. code-block:: json

  {
    "command": "InjectParticles",  // Имя команды
    "ionized": "Pa",  // Имя ионизированных частиц из раздела "Patrticles"
    "ejected": "Pb",  // Имя выброшенных частиц из раздела "Patrticles"
    "coordinate": {}, // Описание координат для обеих частиц
    "momentum_i": {}, // Описание импульса ионизированных частиц
    "momentum_e": {}, // Описание импульса выброшенных частиц

    // Дополнительные параметры (приведены значения по умолчанию)
    "injection_start": 0, // Время начала инжекции
    "injection_end": 1,   // Время окончания инжекции, может быть "geom_t"
                          // т.е. конец времени моделирования
    "tau": "$injection_start - $injection_end", // Темп инжекции 
    "per_step_particles_num": "depends on coordinate and tau"
  }

*Примечание:* Для всех типов координат параметр ``number_of_particles``, используемый для определения числа частиц обеспечивающих плотность равную единице в момент времени ``tau``, рассчитывается автоматически на основе геометрии и числа частиц в ячейке ``Np`` (ионов). Если будет указан параметр ``per_step_particles_num``, за один шаг моделирования будет инжектироваться ровно запрошенное число частиц.

Подробности задания общих полей ``"coordinate"``, ``"momentum"`` можно посмотреть ниже.


.. _common_settings:

Общие параметры конфигурации
============================

.. _coordinate:

Координаты (``"coordinate"``):
------------------------------

*Важно:* Параметр ``name`` в конфигурации координат должен точно соответствовать одному из доступных типов: ``PreciseCoordinate``, ``CoordinateInBox`` или ``CoordinateInCylinder``.

**PreciseCoordinate** - точные координаты для всех частиц

``number_of_particles = Np`` - числу частиц в ячейке для _ионизованных_ частиц,

.. code-block:: json

  "coordinate": {
    "name": "PreciseCoordinate",  // Тип координат
    "value": ["$x", "$y", "$z"]   // Точные координаты для всех инжектируемых частиц
  }

**CoordinateInBox** - случайные координаты в прямоугольной области

``number_of_particles = (max - min).elements_product() * Np / (dx * dy * dz)``

.. code-block:: json

  "coordinate": {
    "name": "CoordinateInBox",  // Тип координат
    "min": ["$x", "$y", "$z"],  // Минимальные координаты области (дефолт: 0)
    "max": ["$x", "$y", "$z"]   // Максимальные координаты области (дефолт: Geom)
  }

**CoordinateInCylinder** - случайные координаты в цилиндрической области

``number_of_particles = M_PI * radius * radius * height * Np / (dx * dy * dz)``

.. code-block:: json

  "coordinate": {
    "name": "CoordinateInCylinder",  // Тип координат
    "center": ["$x", "$y", "$z"],    // Центр цилиндра (дефолт: Geom/2)
    "radius": "$r",                  // Радиус цилиндра (дефолт: min(geom_x, geom_y)/2)
    "height": "$h"                   // Высота цилиндра (дефолт: geom_z)
  }


Импульс (``"momentum"``):
-------------------------

*Важно:* Параметр ``name`` в конфигурации координат должен точно соответствовать одному из доступных типов: ``PreciseMomentum``, ``MaxwellianMomentum``.

**PreciseMomentum** - точно заданное значения импульса частицы

.. code-block:: json

  "momentum": {
    "name": "PreciseMomentum",   // Тип координат
    "value": ["$x", "$y", "$z"]  // Точный момент для всех инжектируемых частиц
  }

**MaxwellianMomentum** - распределение импульса по максвелловскому распределению

.. code-block:: json

  "momentum": {
    "name": "MaxwellianMomentum",  // Тип импульса
    "temperature": "$T",           // Температура частиц
    "tov": true                    // Конвертировать ли импульс в скорость (дефолт: false)
  }

Геометрии (``"geometry"``):
---------------------------

*Важно:* Параметр ``name`` в конфигурации геометрии должен точно соответствовать одному из доступных типов: ``BoxGeometry``, ``CylinderGeometry``. Конфигурация геометрии практически полностью повторяет описание координат в разделе :ref:`coordinate`. Единственным отличием является то, что здесь явно указан тип геометрии, а не тип координат, как это сделано в разделе выше.

На примере прямоугольной геометрии:

.. code-block:: json

  "geometry": {
    "name": "BoxGeometry",      // Тип геометрии
    "min": ["$x", "$y", "$z"],  // Минимальные координаты области (дефолт: 0)
    "max": ["$x", "$y", "$z"]   // Максимальные координаты области (дефолт: Geom)
  }


SetMagneticField
================

**Описание:** Команда для установки магнитного поля в симуляции. Поддерживает различные типы полей: однородное поле, поле катушек, приближенное зеркальное поле.

**Конфигурация в JSON:**

.. code-block:: json

  {
    "command": "SetMagneticField",  // Имя команды
    "field": "B0",                  // Имя поля для установки (из Simulation)
    "field_axpy": "B",              // Имя поля для добавления B0 (опционально)
    "setter": {}                    // Описание установщика поля
  }


Установщики магнитного поля (``"setter"``):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Важно:* Параметр ``name`` в конфигурации установщика должен точно соответствовать одному из доступных типов: ``SetUniformField``, ``SetCoilsField``, ``SetMirrorField``.

**SetUniformField** - однородное магнитное поле

.. code-block:: json

  "setter": {
    "name": "SetUniformField",  // Тип установщика
    "value": [Bx, By, Bz]       // Компоненты магнитного поля
  }

**SetCoilsField** - поле от _массива_ катушек

.. code-block:: json

  "setter": {
    "name": "SetCoilsField",  // Тип установщика
    "coils": [                // Массив катушек
      {
        "z0": "$z0",          // Позиция по оси Z
        "R": "$R",            // Радиус катушки
        "I": "$I"             // Ток в катушке
      }
    ]
  }

**SetMirrorField** - приближенное зеркальное поле

.. code-block:: json

  "setter": {
    "name": "SetMirrorField",   // Тип установщика
    "B0": 1.0,                  // Базовая величина поля
    "L": 10.0,                  // Длина зеркала
    "R": 2.0                    // Радиус зеркала
  }


FieldsDamping
=============

**Описание:** Команда для затухания полей в определенной геометрической области. Применяет коэффициент затухания к электрическому и магнитному полям.

**Конфигурация в JSON:**

.. code-block:: json

  {
    "command": "FieldsDamping",  // Имя команды
    "E": "E",                    // Имя электрического поля
    "B": "B",                    // Имя магнитного поля
    "B0": "B0",                  // Имя базового магнитного поля
    "geometry": {},              // Описание геометрии области затухания
    "damping_coefficient": "$D"  // Коэффициент затухания
  }


SetParticles
============

**Описание:** Команда для установки частиц с заданными координатами и импульсами в симуляции.

**Конфигурация в JSON:**

.. code-block:: json

  {
    "command": "SetParticles",  // Имя команды
    "particles": "Pa",          // Имя частиц из секции "Particles"
    "coordinate": {},           // Описание координат частиц
    "momentum": {}              // Описание импульса частиц
  }

См. :ref:`common_settings` для подробного описания координат и импульса.


RemoveParticles
===============

**Описание:** Команда для удаления частиц из определенной геометрической области.

**Конфигурация в JSON:**

.. code-block:: json

  {
    "command": "RemoveParticles", // Имя команды
    "particles": "Pa",            // Имя частиц из секции "Particles"
    "geometry": {}                // Описание геометрии области удаления
  }


См. :ref:`common_settings` для подробного описания геометрий.

Примеры конфигураций
====================

**Полная конфигурация для инжекции частиц:**

.. code-block:: json

  {
    "command": "InjectParticles",
    "ionized": "ions",
    "ejected": "electrons",
    "injection_start": 0,
    "injection_end": 100,
    "per_step_particles_num": 100,
    "coordinate": { "name": "CoordinateInBox", "min": [0, 0, 0], "max": [10, 10, 10] },
    "momentum_i": { "name": "MaxwellianMomentum", "temperature": 1.0 },
    "momentum_e": { "name": "MaxwellianMomentum", "temperature": 0.1 }
  }

**Конфигурация для магнитного поля катушек:**

.. code-block:: json

  {
    "command": "SetMagneticField",
    "field": "B0",
    "setter": {
      "name": "SetCoilsField",
      "coils": [
        { "z0": -5.0, "R": 2.0, "I":  1.0 },
        { "z0":  5.0, "R": 2.0, "I": -1.0 }
      ]
    }
  }

**Конфигурация для затухания полей:**

.. code-block:: json

  {
    "command": "FieldsDamping",
    "E": "E",
    "B": "B",
    "B0": "B0",
    "geometry": {
      "name": "BoxGeometry",
      "min": [0, 0, 0],
      "max": [10, 10, 10]
    },
    "damping_coefficient": 0.1
  }
